///
/// JHybridMapboxNavigationViewManagerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridMapboxNavigationViewManagerSpec.hpp"



#include <future>
#include <NitroModules/JPromise.hpp>

namespace margelo::nitro::iplastudio::mapboxnavigation {

  jni::local_ref<JHybridMapboxNavigationViewManagerSpec::jhybriddata> JHybridMapboxNavigationViewManagerSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridMapboxNavigationViewManagerSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridMapboxNavigationViewManagerSpec::initHybrid),
    });
  }

  size_t JHybridMapboxNavigationViewManagerSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::future<void> JHybridMapboxNavigationViewManagerSpec::randomTestFunction() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>()>("randomTestFunction");
    auto result = method(_javaPart);
    return [&]() {
      auto promise = std::make_shared<std::promise<void>>();
      result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& boxedResult) {
        promise->set_value();
      });
      result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JString>& message) {
        std::runtime_error error(message->toStdString());
        promise->set_exception(std::make_exception_ptr(error));
      });
      return promise->get_future();
    }();
  }

} // namespace margelo::nitro::iplastudio::mapboxnavigation
